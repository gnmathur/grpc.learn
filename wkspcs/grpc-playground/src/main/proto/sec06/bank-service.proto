syntax = "proto3";

package sec06;

option java_multiple_files = true;
option java_package = "dev.gmathur.models.sec06";
import "google/protobuf/empty.proto";

message BalanceCheckRequest {
  int32 account_number = 1;
}

message BalanceCheckResponse {
  int32 account_number = 1;
  int32 balance = 2;
}

message AllAccountsResponse {
  repeated BalanceCheckResponse accounts = 1;
}

message WithdrawRequest {
  int32 account_number = 1;
  int32 amount = 2;
}

message WithdrawResponse {
  int32 account_number = 1;
  int32 amount = 2;
}

message DepositRequest {
  oneof req_options {
    int32 account_number = 1;
    int32 amount = 2;
  }
}

message DepositResponse {
  int32 account_number = 1;
  int32 balance = 2;
}

message TransferRequest {
  int32 from_account_number = 1;
  int32 to_account_number = 2;
  int32 amount = 3;
}

enum TransferStatus {
  SUCCESS = 0;
  INSUFFICIENT_FUNDS = 1;
  ACCOUNT_NOT_FOUND = 2;
  INVALID_AMOUNT = 3;
  TRANSFER_FAILED = 4;
}

message TransferResponse {
  TransferStatus status = 1;
  int32 from_account_number = 2;
  int32 to_account_number = 3;
  int32 from_balance = 4;
  int32 to_balance = 5;
}

service BankService {
  // Unary RPC
  rpc GetAccountBalance(BalanceCheckRequest) returns (BalanceCheckResponse);
  // Two ways of doing the following:
  //
  //  message NoParam {}
  // rpc GetAllAccount(NoParam) returns (AccountBalance);
  //
  // or better still, leverage the google.protobuf.Empty message
  rpc GetAllAccount(google.protobuf.Empty) returns (AllAccountsResponse);

  // Server Stream RPC
  rpc WithdrawMoney(WithdrawRequest) returns (stream WithdrawResponse);

  // Client Stream RPC
  rpc DepositMoney(stream DepositRequest) returns (DepositResponse);
}

service TransferService {
  // Bidirectional Stream RPC
  rpc TransferMoney(stream TransferRequest) returns (stream TransferResponse);
}